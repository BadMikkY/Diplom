
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model Specialist
 * 
 */
export type Specialist = $Result.DefaultSelection<Prisma.$SpecialistPayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model WorkProgress
 * 
 */
export type WorkProgress = $Result.DefaultSelection<Prisma.$WorkProgressPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs>;

  /**
   * `prisma.specialist`: Exposes CRUD operations for the **Specialist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specialists
    * const specialists = await prisma.specialist.findMany()
    * ```
    */
  get specialist(): Prisma.SpecialistDelegate<ExtArgs>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.workProgress`: Exposes CRUD operations for the **WorkProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkProgresses
    * const workProgresses = await prisma.workProgress.findMany()
    * ```
    */
  get workProgress(): Prisma.WorkProgressDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Service: 'Service',
    Specialist: 'Specialist',
    Booking: 'Booking',
    Review: 'Review',
    WorkProgress: 'WorkProgress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'service' | 'specialist' | 'booking' | 'review' | 'workProgress'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      Specialist: {
        payload: Prisma.$SpecialistPayload<ExtArgs>
        fields: Prisma.SpecialistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecialistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecialistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          findFirst: {
            args: Prisma.SpecialistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecialistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          findMany: {
            args: Prisma.SpecialistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>[]
          }
          create: {
            args: Prisma.SpecialistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          createMany: {
            args: Prisma.SpecialistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SpecialistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          update: {
            args: Prisma.SpecialistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          deleteMany: {
            args: Prisma.SpecialistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SpecialistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SpecialistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialistPayload>
          }
          aggregate: {
            args: Prisma.SpecialistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpecialist>
          }
          groupBy: {
            args: Prisma.SpecialistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpecialistGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecialistCountArgs<ExtArgs>,
            result: $Utils.Optional<SpecialistCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>,
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      WorkProgress: {
        payload: Prisma.$WorkProgressPayload<ExtArgs>
        fields: Prisma.WorkProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkProgressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkProgressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          findFirst: {
            args: Prisma.WorkProgressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkProgressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          findMany: {
            args: Prisma.WorkProgressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>[]
          }
          create: {
            args: Prisma.WorkProgressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          createMany: {
            args: Prisma.WorkProgressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkProgressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          update: {
            args: Prisma.WorkProgressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          deleteMany: {
            args: Prisma.WorkProgressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkProgressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkProgressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkProgressPayload>
          }
          aggregate: {
            args: Prisma.WorkProgressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkProgress>
          }
          groupBy: {
            args: Prisma.WorkProgressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkProgressCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkProgressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Bookings: number
    Reviews: number
    Services: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bookings?: boolean | UserCountOutputTypeCountBookingsArgs
    Reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    Services?: boolean | UserCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }



  /**
   * Count Type SpecialistCountOutputType
   */

  export type SpecialistCountOutputType = {
    Bookings: number
    Reviews: number
    Services: number
  }

  export type SpecialistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bookings?: boolean | SpecialistCountOutputTypeCountBookingsArgs
    Reviews?: boolean | SpecialistCountOutputTypeCountReviewsArgs
    Services?: boolean | SpecialistCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialistCountOutputType
     */
    select?: SpecialistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    UserID: number | null
  }

  export type UserSumAggregateOutputType = {
    UserID: number | null
  }

  export type UserMinAggregateOutputType = {
    UserID: number | null
    UserName: string | null
    Email: string | null
    Password: string | null
    Role: string | null
  }

  export type UserMaxAggregateOutputType = {
    UserID: number | null
    UserName: string | null
    Email: string | null
    Password: string | null
    Role: string | null
  }

  export type UserCountAggregateOutputType = {
    UserID: number
    UserName: number
    Email: number
    Password: number
    Role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    UserID?: true
  }

  export type UserSumAggregateInputType = {
    UserID?: true
  }

  export type UserMinAggregateInputType = {
    UserID?: true
    UserName?: true
    Email?: true
    Password?: true
    Role?: true
  }

  export type UserMaxAggregateInputType = {
    UserID?: true
    UserName?: true
    Email?: true
    Password?: true
    Role?: true
  }

  export type UserCountAggregateInputType = {
    UserID?: true
    UserName?: true
    Email?: true
    Password?: true
    Role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    UserID: number
    UserName: string
    Email: string
    Password: string
    Role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserID?: boolean
    UserName?: boolean
    Email?: boolean
    Password?: boolean
    Role?: boolean
    Bookings?: boolean | User$BookingsArgs<ExtArgs>
    Reviews?: boolean | User$ReviewsArgs<ExtArgs>
    Services?: boolean | User$ServicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    UserID?: boolean
    UserName?: boolean
    Email?: boolean
    Password?: boolean
    Role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bookings?: boolean | User$BookingsArgs<ExtArgs>
    Reviews?: boolean | User$ReviewsArgs<ExtArgs>
    Services?: boolean | User$ServicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Bookings: Prisma.$BookingPayload<ExtArgs>[]
      Reviews: Prisma.$ReviewPayload<ExtArgs>[]
      Services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserID: number
      UserName: string
      Email: string
      Password: string
      Role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `UserID`
     * const userWithUserIDOnly = await prisma.user.findMany({ select: { UserID: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Bookings<T extends User$BookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$BookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findMany'> | Null>;

    Reviews<T extends User$ReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$ReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends User$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, User$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly UserID: FieldRef<"User", 'Int'>
    readonly UserName: FieldRef<"User", 'String'>
    readonly Email: FieldRef<"User", 'String'>
    readonly Password: FieldRef<"User", 'String'>
    readonly Role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Bookings
   */
  export type User$BookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }


  /**
   * User.Reviews
   */
  export type User$ReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * User.Services
   */
  export type User$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    ServiceID: number | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ServiceSumAggregateOutputType = {
    ServiceID: number | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ServiceMinAggregateOutputType = {
    ServiceID: number | null
    ServiceName: string | null
    Description: string | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ServiceMaxAggregateOutputType = {
    ServiceID: number | null
    ServiceName: string | null
    Description: string | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ServiceCountAggregateOutputType = {
    ServiceID: number
    ServiceName: number
    Description: number
    UserID: number
    SpecialistID: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    ServiceID?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ServiceSumAggregateInputType = {
    ServiceID?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ServiceMinAggregateInputType = {
    ServiceID?: true
    ServiceName?: true
    Description?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ServiceMaxAggregateInputType = {
    ServiceID?: true
    ServiceName?: true
    Description?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ServiceCountAggregateInputType = {
    ServiceID?: true
    ServiceName?: true
    Description?: true
    UserID?: true
    SpecialistID?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    ServiceID: number
    ServiceName: string
    Description: string
    UserID: number
    SpecialistID: number | null
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ServiceID?: boolean
    ServiceName?: boolean
    Description?: boolean
    UserID?: boolean
    SpecialistID?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | Service$SpecialistArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    ServiceID?: boolean
    ServiceName?: boolean
    Description?: boolean
    UserID?: boolean
    SpecialistID?: boolean
  }

  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | Service$SpecialistArgs<ExtArgs>
  }


  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Specialist: Prisma.$SpecialistPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      ServiceID: number
      ServiceName: string
      Description: string
      UserID: number
      SpecialistID: number | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }


  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Service that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `ServiceID`
     * const serviceWithServiceIDOnly = await prisma.service.findMany({ select: { ServiceID: true } })
     * 
    **/
    findMany<T extends ServiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
    **/
    create<T extends ServiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const service = await prisma.service.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
    **/
    delete<T extends ServiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>
    ): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Specialist<T extends Service$SpecialistArgs<ExtArgs> = {}>(args?: Subset<T, Service$SpecialistArgs<ExtArgs>>): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Service model
   */ 
  interface ServiceFieldRefs {
    readonly ServiceID: FieldRef<"Service", 'Int'>
    readonly ServiceName: FieldRef<"Service", 'String'>
    readonly Description: FieldRef<"Service", 'String'>
    readonly UserID: FieldRef<"Service", 'Int'>
    readonly SpecialistID: FieldRef<"Service", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }


  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
  }


  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }


  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }


  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
  }


  /**
   * Service.Specialist
   */
  export type Service$SpecialistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    where?: SpecialistWhereInput
  }


  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
  }



  /**
   * Model Specialist
   */

  export type AggregateSpecialist = {
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  export type SpecialistAvgAggregateOutputType = {
    SpecialistID: number | null
  }

  export type SpecialistSumAggregateOutputType = {
    SpecialistID: number | null
  }

  export type SpecialistMinAggregateOutputType = {
    SpecialistID: number | null
    Email: string | null
    Skills: string | null
    SpecName: string | null
    Password: string | null
    Experience: string | null
    Schedule: string | null
    Rates: string | null
  }

  export type SpecialistMaxAggregateOutputType = {
    SpecialistID: number | null
    Email: string | null
    Skills: string | null
    SpecName: string | null
    Password: string | null
    Experience: string | null
    Schedule: string | null
    Rates: string | null
  }

  export type SpecialistCountAggregateOutputType = {
    SpecialistID: number
    Email: number
    Skills: number
    SpecName: number
    Password: number
    Experience: number
    Schedule: number
    Rates: number
    _all: number
  }


  export type SpecialistAvgAggregateInputType = {
    SpecialistID?: true
  }

  export type SpecialistSumAggregateInputType = {
    SpecialistID?: true
  }

  export type SpecialistMinAggregateInputType = {
    SpecialistID?: true
    Email?: true
    Skills?: true
    SpecName?: true
    Password?: true
    Experience?: true
    Schedule?: true
    Rates?: true
  }

  export type SpecialistMaxAggregateInputType = {
    SpecialistID?: true
    Email?: true
    Skills?: true
    SpecName?: true
    Password?: true
    Experience?: true
    Schedule?: true
    Rates?: true
  }

  export type SpecialistCountAggregateInputType = {
    SpecialistID?: true
    Email?: true
    Skills?: true
    SpecName?: true
    Password?: true
    Experience?: true
    Schedule?: true
    Rates?: true
    _all?: true
  }

  export type SpecialistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Specialist to aggregate.
     */
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     */
    orderBy?: SpecialistOrderByWithRelationInput | SpecialistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specialists
    **/
    _count?: true | SpecialistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecialistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecialistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialistMaxAggregateInputType
  }

  export type GetSpecialistAggregateType<T extends SpecialistAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialist[P]>
      : GetScalarType<T[P], AggregateSpecialist[P]>
  }




  export type SpecialistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialistWhereInput
    orderBy?: SpecialistOrderByWithAggregationInput | SpecialistOrderByWithAggregationInput[]
    by: SpecialistScalarFieldEnum[] | SpecialistScalarFieldEnum
    having?: SpecialistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialistCountAggregateInputType | true
    _avg?: SpecialistAvgAggregateInputType
    _sum?: SpecialistSumAggregateInputType
    _min?: SpecialistMinAggregateInputType
    _max?: SpecialistMaxAggregateInputType
  }

  export type SpecialistGroupByOutputType = {
    SpecialistID: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  type GetSpecialistGroupByPayload<T extends SpecialistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecialistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
        }
      >
    >


  export type SpecialistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SpecialistID?: boolean
    Email?: boolean
    Skills?: boolean
    SpecName?: boolean
    Password?: boolean
    Experience?: boolean
    Schedule?: boolean
    Rates?: boolean
    Bookings?: boolean | Specialist$BookingsArgs<ExtArgs>
    Reviews?: boolean | Specialist$ReviewsArgs<ExtArgs>
    Services?: boolean | Specialist$ServicesArgs<ExtArgs>
    _count?: boolean | SpecialistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specialist"]>

  export type SpecialistSelectScalar = {
    SpecialistID?: boolean
    Email?: boolean
    Skills?: boolean
    SpecName?: boolean
    Password?: boolean
    Experience?: boolean
    Schedule?: boolean
    Rates?: boolean
  }

  export type SpecialistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bookings?: boolean | Specialist$BookingsArgs<ExtArgs>
    Reviews?: boolean | Specialist$ReviewsArgs<ExtArgs>
    Services?: boolean | Specialist$ServicesArgs<ExtArgs>
    _count?: boolean | SpecialistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SpecialistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Specialist"
    objects: {
      Bookings: Prisma.$BookingPayload<ExtArgs>[]
      Reviews: Prisma.$ReviewPayload<ExtArgs>[]
      Services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      SpecialistID: number
      Email: string
      Skills: string
      SpecName: string
      Password: string
      Experience: string
      Schedule: string
      Rates: string
    }, ExtArgs["result"]["specialist"]>
    composites: {}
  }


  type SpecialistGetPayload<S extends boolean | null | undefined | SpecialistDefaultArgs> = $Result.GetResult<Prisma.$SpecialistPayload, S>

  type SpecialistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpecialistFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpecialistCountAggregateInputType | true
    }

  export interface SpecialistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Specialist'], meta: { name: 'Specialist' } }
    /**
     * Find zero or one Specialist that matches the filter.
     * @param {SpecialistFindUniqueArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecialistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistFindUniqueArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Specialist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpecialistFindUniqueOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecialistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Specialist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecialistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistFindFirstArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Specialist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecialistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Specialists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specialists
     * const specialists = await prisma.specialist.findMany()
     * 
     * // Get first 10 Specialists
     * const specialists = await prisma.specialist.findMany({ take: 10 })
     * 
     * // Only select the `SpecialistID`
     * const specialistWithSpecialistIDOnly = await prisma.specialist.findMany({ select: { SpecialistID: true } })
     * 
    **/
    findMany<T extends SpecialistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Specialist.
     * @param {SpecialistCreateArgs} args - Arguments to create a Specialist.
     * @example
     * // Create one Specialist
     * const Specialist = await prisma.specialist.create({
     *   data: {
     *     // ... data to create a Specialist
     *   }
     * })
     * 
    **/
    create<T extends SpecialistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistCreateArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Specialists.
     *     @param {SpecialistCreateManyArgs} args - Arguments to create many Specialists.
     *     @example
     *     // Create many Specialists
     *     const specialist = await prisma.specialist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecialistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Specialist.
     * @param {SpecialistDeleteArgs} args - Arguments to delete one Specialist.
     * @example
     * // Delete one Specialist
     * const Specialist = await prisma.specialist.delete({
     *   where: {
     *     // ... filter to delete one Specialist
     *   }
     * })
     * 
    **/
    delete<T extends SpecialistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistDeleteArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Specialist.
     * @param {SpecialistUpdateArgs} args - Arguments to update one Specialist.
     * @example
     * // Update one Specialist
     * const specialist = await prisma.specialist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecialistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistUpdateArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Specialists.
     * @param {SpecialistDeleteManyArgs} args - Arguments to filter Specialists to delete.
     * @example
     * // Delete a few Specialists
     * const { count } = await prisma.specialist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecialistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specialists
     * const specialist = await prisma.specialist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecialistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Specialist.
     * @param {SpecialistUpsertArgs} args - Arguments to update or create a Specialist.
     * @example
     * // Update or create a Specialist
     * const specialist = await prisma.specialist.upsert({
     *   create: {
     *     // ... data to create a Specialist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specialist we want to update
     *   }
     * })
    **/
    upsert<T extends SpecialistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialistUpsertArgs<ExtArgs>>
    ): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistCountArgs} args - Arguments to filter Specialists to count.
     * @example
     * // Count the number of Specialists
     * const count = await prisma.specialist.count({
     *   where: {
     *     // ... the filter for the Specialists we want to count
     *   }
     * })
    **/
    count<T extends SpecialistCountArgs>(
      args?: Subset<T, SpecialistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialistAggregateArgs>(args: Subset<T, SpecialistAggregateArgs>): Prisma.PrismaPromise<GetSpecialistAggregateType<T>>

    /**
     * Group by Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialistGroupByArgs['orderBy'] }
        : { orderBy?: SpecialistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Specialist model
   */
  readonly fields: SpecialistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Specialist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecialistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Bookings<T extends Specialist$BookingsArgs<ExtArgs> = {}>(args?: Subset<T, Specialist$BookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findMany'> | Null>;

    Reviews<T extends Specialist$ReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Specialist$ReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends Specialist$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, Specialist$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Specialist model
   */ 
  interface SpecialistFieldRefs {
    readonly SpecialistID: FieldRef<"Specialist", 'Int'>
    readonly Email: FieldRef<"Specialist", 'String'>
    readonly Skills: FieldRef<"Specialist", 'String'>
    readonly SpecName: FieldRef<"Specialist", 'String'>
    readonly Password: FieldRef<"Specialist", 'String'>
    readonly Experience: FieldRef<"Specialist", 'String'>
    readonly Schedule: FieldRef<"Specialist", 'String'>
    readonly Rates: FieldRef<"Specialist", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Specialist findUnique
   */
  export type SpecialistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter, which Specialist to fetch.
     */
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist findUniqueOrThrow
   */
  export type SpecialistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter, which Specialist to fetch.
     */
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist findFirst
   */
  export type SpecialistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter, which Specialist to fetch.
     */
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     */
    orderBy?: SpecialistOrderByWithRelationInput | SpecialistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialists.
     */
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialists.
     */
    distinct?: SpecialistScalarFieldEnum | SpecialistScalarFieldEnum[]
  }


  /**
   * Specialist findFirstOrThrow
   */
  export type SpecialistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter, which Specialist to fetch.
     */
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     */
    orderBy?: SpecialistOrderByWithRelationInput | SpecialistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialists.
     */
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialists.
     */
    distinct?: SpecialistScalarFieldEnum | SpecialistScalarFieldEnum[]
  }


  /**
   * Specialist findMany
   */
  export type SpecialistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter, which Specialists to fetch.
     */
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     */
    orderBy?: SpecialistOrderByWithRelationInput | SpecialistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specialists.
     */
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     */
    skip?: number
    distinct?: SpecialistScalarFieldEnum | SpecialistScalarFieldEnum[]
  }


  /**
   * Specialist create
   */
  export type SpecialistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * The data needed to create a Specialist.
     */
    data: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
  }


  /**
   * Specialist createMany
   */
  export type SpecialistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Specialists.
     */
    data: SpecialistCreateManyInput | SpecialistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Specialist update
   */
  export type SpecialistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * The data needed to update a Specialist.
     */
    data: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
    /**
     * Choose, which Specialist to update.
     */
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist updateMany
   */
  export type SpecialistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Specialists.
     */
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyInput>
    /**
     * Filter which Specialists to update
     */
    where?: SpecialistWhereInput
  }


  /**
   * Specialist upsert
   */
  export type SpecialistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * The filter to search for the Specialist to update in case it exists.
     */
    where: SpecialistWhereUniqueInput
    /**
     * In case the Specialist found by the `where` argument doesn't exist, create a new Specialist with this data.
     */
    create: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
    /**
     * In case the Specialist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
  }


  /**
   * Specialist delete
   */
  export type SpecialistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
    /**
     * Filter which Specialist to delete.
     */
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist deleteMany
   */
  export type SpecialistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Specialists to delete
     */
    where?: SpecialistWhereInput
  }


  /**
   * Specialist.Bookings
   */
  export type Specialist$BookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }


  /**
   * Specialist.Reviews
   */
  export type Specialist$ReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Specialist.Services
   */
  export type Specialist$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }


  /**
   * Specialist without action
   */
  export type SpecialistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialist
     */
    select?: SpecialistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecialistInclude<ExtArgs> | null
  }



  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    BookingID: number | null
    UserID: number | null
    SpecialistID: number | null
    ReviewID: number | null
  }

  export type BookingSumAggregateOutputType = {
    BookingID: number | null
    UserID: number | null
    SpecialistID: number | null
    ReviewID: number | null
  }

  export type BookingMinAggregateOutputType = {
    BookingID: number | null
    UserID: number | null
    SpecialistID: number | null
    BookingDate: string | null
    Status: string | null
    ReviewID: number | null
  }

  export type BookingMaxAggregateOutputType = {
    BookingID: number | null
    UserID: number | null
    SpecialistID: number | null
    BookingDate: string | null
    Status: string | null
    ReviewID: number | null
  }

  export type BookingCountAggregateOutputType = {
    BookingID: number
    UserID: number
    SpecialistID: number
    BookingDate: number
    Status: number
    ReviewID: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    BookingID?: true
    UserID?: true
    SpecialistID?: true
    ReviewID?: true
  }

  export type BookingSumAggregateInputType = {
    BookingID?: true
    UserID?: true
    SpecialistID?: true
    ReviewID?: true
  }

  export type BookingMinAggregateInputType = {
    BookingID?: true
    UserID?: true
    SpecialistID?: true
    BookingDate?: true
    Status?: true
    ReviewID?: true
  }

  export type BookingMaxAggregateInputType = {
    BookingID?: true
    UserID?: true
    SpecialistID?: true
    BookingDate?: true
    Status?: true
    ReviewID?: true
  }

  export type BookingCountAggregateInputType = {
    BookingID?: true
    UserID?: true
    SpecialistID?: true
    BookingDate?: true
    Status?: true
    ReviewID?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    BookingID: number
    UserID: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    BookingID?: boolean
    UserID?: boolean
    SpecialistID?: boolean
    BookingDate?: boolean
    Status?: boolean
    ReviewID?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | SpecialistDefaultArgs<ExtArgs>
    WorkProgress?: boolean | Booking$WorkProgressArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectScalar = {
    BookingID?: boolean
    UserID?: boolean
    SpecialistID?: boolean
    BookingDate?: boolean
    Status?: boolean
    ReviewID?: boolean
  }

  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | SpecialistDefaultArgs<ExtArgs>
    WorkProgress?: boolean | Booking$WorkProgressArgs<ExtArgs>
  }


  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Specialist: Prisma.$SpecialistPayload<ExtArgs>
      WorkProgress: Prisma.$WorkProgressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      BookingID: number
      UserID: number
      SpecialistID: number
      BookingDate: string
      Status: string
      ReviewID: number
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }


  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Booking that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `BookingID`
     * const bookingWithBookingIDOnly = await prisma.booking.findMany({ select: { BookingID: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookingCreateArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>
    ): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Specialist<T extends SpecialistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpecialistDefaultArgs<ExtArgs>>): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    WorkProgress<T extends Booking$WorkProgressArgs<ExtArgs> = {}>(args?: Subset<T, Booking$WorkProgressArgs<ExtArgs>>): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Booking model
   */ 
  interface BookingFieldRefs {
    readonly BookingID: FieldRef<"Booking", 'Int'>
    readonly UserID: FieldRef<"Booking", 'Int'>
    readonly SpecialistID: FieldRef<"Booking", 'Int'>
    readonly BookingDate: FieldRef<"Booking", 'String'>
    readonly Status: FieldRef<"Booking", 'String'>
    readonly ReviewID: FieldRef<"Booking", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }


  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }


  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
  }


  /**
   * Booking.WorkProgress
   */
  export type Booking$WorkProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    where?: WorkProgressWhereInput
  }


  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude<ExtArgs> | null
  }



  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    ReviewID: number | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ReviewSumAggregateOutputType = {
    ReviewID: number | null
    UserID: number | null
    SpecialistID: number | null
  }

  export type ReviewMinAggregateOutputType = {
    ReviewID: number | null
    UserID: number | null
    SpecialistID: number | null
    Rating: string | null
    ReviewText: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    ReviewID: number | null
    UserID: number | null
    SpecialistID: number | null
    Rating: string | null
    ReviewText: string | null
  }

  export type ReviewCountAggregateOutputType = {
    ReviewID: number
    UserID: number
    SpecialistID: number
    Rating: number
    ReviewText: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    ReviewID?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ReviewSumAggregateInputType = {
    ReviewID?: true
    UserID?: true
    SpecialistID?: true
  }

  export type ReviewMinAggregateInputType = {
    ReviewID?: true
    UserID?: true
    SpecialistID?: true
    Rating?: true
    ReviewText?: true
  }

  export type ReviewMaxAggregateInputType = {
    ReviewID?: true
    UserID?: true
    SpecialistID?: true
    Rating?: true
    ReviewText?: true
  }

  export type ReviewCountAggregateInputType = {
    ReviewID?: true
    UserID?: true
    SpecialistID?: true
    Rating?: true
    ReviewText?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    ReviewID: number
    UserID: number
    SpecialistID: number
    Rating: string
    ReviewText: string
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ReviewID?: boolean
    UserID?: boolean
    SpecialistID?: boolean
    Rating?: boolean
    ReviewText?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | SpecialistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    ReviewID?: boolean
    UserID?: boolean
    SpecialistID?: boolean
    Rating?: boolean
    ReviewText?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Specialist?: boolean | SpecialistDefaultArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Specialist: Prisma.$SpecialistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ReviewID: number
      UserID: number
      SpecialistID: number
      Rating: string
      ReviewText: string
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `ReviewID`
     * const reviewWithReviewIDOnly = await prisma.review.findMany({ select: { ReviewID: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Specialist<T extends SpecialistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpecialistDefaultArgs<ExtArgs>>): Prisma__SpecialistClient<$Result.GetResult<Prisma.$SpecialistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly ReviewID: FieldRef<"Review", 'Int'>
    readonly UserID: FieldRef<"Review", 'Int'>
    readonly SpecialistID: FieldRef<"Review", 'Int'>
    readonly Rating: FieldRef<"Review", 'String'>
    readonly ReviewText: FieldRef<"Review", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
  }



  /**
   * Model WorkProgress
   */

  export type AggregateWorkProgress = {
    _count: WorkProgressCountAggregateOutputType | null
    _avg: WorkProgressAvgAggregateOutputType | null
    _sum: WorkProgressSumAggregateOutputType | null
    _min: WorkProgressMinAggregateOutputType | null
    _max: WorkProgressMaxAggregateOutputType | null
  }

  export type WorkProgressAvgAggregateOutputType = {
    ProgressID: number | null
    BookingID: number | null
    Percentage: number | null
  }

  export type WorkProgressSumAggregateOutputType = {
    ProgressID: number | null
    BookingID: number | null
    Percentage: number | null
  }

  export type WorkProgressMinAggregateOutputType = {
    ProgressID: number | null
    BookingID: number | null
    Percentage: number | null
    UpdateTime: Date | null
  }

  export type WorkProgressMaxAggregateOutputType = {
    ProgressID: number | null
    BookingID: number | null
    Percentage: number | null
    UpdateTime: Date | null
  }

  export type WorkProgressCountAggregateOutputType = {
    ProgressID: number
    BookingID: number
    Percentage: number
    UpdateTime: number
    _all: number
  }


  export type WorkProgressAvgAggregateInputType = {
    ProgressID?: true
    BookingID?: true
    Percentage?: true
  }

  export type WorkProgressSumAggregateInputType = {
    ProgressID?: true
    BookingID?: true
    Percentage?: true
  }

  export type WorkProgressMinAggregateInputType = {
    ProgressID?: true
    BookingID?: true
    Percentage?: true
    UpdateTime?: true
  }

  export type WorkProgressMaxAggregateInputType = {
    ProgressID?: true
    BookingID?: true
    Percentage?: true
    UpdateTime?: true
  }

  export type WorkProgressCountAggregateInputType = {
    ProgressID?: true
    BookingID?: true
    Percentage?: true
    UpdateTime?: true
    _all?: true
  }

  export type WorkProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkProgress to aggregate.
     */
    where?: WorkProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkProgresses to fetch.
     */
    orderBy?: WorkProgressOrderByWithRelationInput | WorkProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkProgresses
    **/
    _count?: true | WorkProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkProgressMaxAggregateInputType
  }

  export type GetWorkProgressAggregateType<T extends WorkProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkProgress[P]>
      : GetScalarType<T[P], AggregateWorkProgress[P]>
  }




  export type WorkProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkProgressWhereInput
    orderBy?: WorkProgressOrderByWithAggregationInput | WorkProgressOrderByWithAggregationInput[]
    by: WorkProgressScalarFieldEnum[] | WorkProgressScalarFieldEnum
    having?: WorkProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkProgressCountAggregateInputType | true
    _avg?: WorkProgressAvgAggregateInputType
    _sum?: WorkProgressSumAggregateInputType
    _min?: WorkProgressMinAggregateInputType
    _max?: WorkProgressMaxAggregateInputType
  }

  export type WorkProgressGroupByOutputType = {
    ProgressID: number
    BookingID: number
    Percentage: number
    UpdateTime: Date
    _count: WorkProgressCountAggregateOutputType | null
    _avg: WorkProgressAvgAggregateOutputType | null
    _sum: WorkProgressSumAggregateOutputType | null
    _min: WorkProgressMinAggregateOutputType | null
    _max: WorkProgressMaxAggregateOutputType | null
  }

  type GetWorkProgressGroupByPayload<T extends WorkProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkProgressGroupByOutputType[P]>
            : GetScalarType<T[P], WorkProgressGroupByOutputType[P]>
        }
      >
    >


  export type WorkProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ProgressID?: boolean
    BookingID?: boolean
    Percentage?: boolean
    UpdateTime?: boolean
    Booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workProgress"]>

  export type WorkProgressSelectScalar = {
    ProgressID?: boolean
    BookingID?: boolean
    Percentage?: boolean
    UpdateTime?: boolean
  }

  export type WorkProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Booking?: boolean | BookingDefaultArgs<ExtArgs>
  }


  export type $WorkProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkProgress"
    objects: {
      Booking: Prisma.$BookingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ProgressID: number
      BookingID: number
      Percentage: number
      UpdateTime: Date
    }, ExtArgs["result"]["workProgress"]>
    composites: {}
  }


  type WorkProgressGetPayload<S extends boolean | null | undefined | WorkProgressDefaultArgs> = $Result.GetResult<Prisma.$WorkProgressPayload, S>

  type WorkProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkProgressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkProgressCountAggregateInputType | true
    }

  export interface WorkProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkProgress'], meta: { name: 'WorkProgress' } }
    /**
     * Find zero or one WorkProgress that matches the filter.
     * @param {WorkProgressFindUniqueArgs} args - Arguments to find a WorkProgress
     * @example
     * // Get one WorkProgress
     * const workProgress = await prisma.workProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkProgressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkProgress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkProgressFindUniqueOrThrowArgs} args - Arguments to find a WorkProgress
     * @example
     * // Get one WorkProgress
     * const workProgress = await prisma.workProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkProgressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressFindFirstArgs} args - Arguments to find a WorkProgress
     * @example
     * // Get one WorkProgress
     * const workProgress = await prisma.workProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkProgressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressFindFirstArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressFindFirstOrThrowArgs} args - Arguments to find a WorkProgress
     * @example
     * // Get one WorkProgress
     * const workProgress = await prisma.workProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkProgressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkProgresses
     * const workProgresses = await prisma.workProgress.findMany()
     * 
     * // Get first 10 WorkProgresses
     * const workProgresses = await prisma.workProgress.findMany({ take: 10 })
     * 
     * // Only select the `ProgressID`
     * const workProgressWithProgressIDOnly = await prisma.workProgress.findMany({ select: { ProgressID: true } })
     * 
    **/
    findMany<T extends WorkProgressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkProgress.
     * @param {WorkProgressCreateArgs} args - Arguments to create a WorkProgress.
     * @example
     * // Create one WorkProgress
     * const WorkProgress = await prisma.workProgress.create({
     *   data: {
     *     // ... data to create a WorkProgress
     *   }
     * })
     * 
    **/
    create<T extends WorkProgressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressCreateArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkProgresses.
     *     @param {WorkProgressCreateManyArgs} args - Arguments to create many WorkProgresses.
     *     @example
     *     // Create many WorkProgresses
     *     const workProgress = await prisma.workProgress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkProgressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkProgress.
     * @param {WorkProgressDeleteArgs} args - Arguments to delete one WorkProgress.
     * @example
     * // Delete one WorkProgress
     * const WorkProgress = await prisma.workProgress.delete({
     *   where: {
     *     // ... filter to delete one WorkProgress
     *   }
     * })
     * 
    **/
    delete<T extends WorkProgressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressDeleteArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkProgress.
     * @param {WorkProgressUpdateArgs} args - Arguments to update one WorkProgress.
     * @example
     * // Update one WorkProgress
     * const workProgress = await prisma.workProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkProgressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressUpdateArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkProgresses.
     * @param {WorkProgressDeleteManyArgs} args - Arguments to filter WorkProgresses to delete.
     * @example
     * // Delete a few WorkProgresses
     * const { count } = await prisma.workProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkProgressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkProgressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkProgresses
     * const workProgress = await prisma.workProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkProgressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkProgress.
     * @param {WorkProgressUpsertArgs} args - Arguments to update or create a WorkProgress.
     * @example
     * // Update or create a WorkProgress
     * const workProgress = await prisma.workProgress.upsert({
     *   create: {
     *     // ... data to create a WorkProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkProgress we want to update
     *   }
     * })
    **/
    upsert<T extends WorkProgressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkProgressUpsertArgs<ExtArgs>>
    ): Prisma__WorkProgressClient<$Result.GetResult<Prisma.$WorkProgressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressCountArgs} args - Arguments to filter WorkProgresses to count.
     * @example
     * // Count the number of WorkProgresses
     * const count = await prisma.workProgress.count({
     *   where: {
     *     // ... the filter for the WorkProgresses we want to count
     *   }
     * })
    **/
    count<T extends WorkProgressCountArgs>(
      args?: Subset<T, WorkProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkProgressAggregateArgs>(args: Subset<T, WorkProgressAggregateArgs>): Prisma.PrismaPromise<GetWorkProgressAggregateType<T>>

    /**
     * Group by WorkProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkProgressGroupByArgs['orderBy'] }
        : { orderBy?: WorkProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkProgress model
   */
  readonly fields: WorkProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkProgress model
   */ 
  interface WorkProgressFieldRefs {
    readonly ProgressID: FieldRef<"WorkProgress", 'Int'>
    readonly BookingID: FieldRef<"WorkProgress", 'Int'>
    readonly Percentage: FieldRef<"WorkProgress", 'Int'>
    readonly UpdateTime: FieldRef<"WorkProgress", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * WorkProgress findUnique
   */
  export type WorkProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter, which WorkProgress to fetch.
     */
    where: WorkProgressWhereUniqueInput
  }


  /**
   * WorkProgress findUniqueOrThrow
   */
  export type WorkProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter, which WorkProgress to fetch.
     */
    where: WorkProgressWhereUniqueInput
  }


  /**
   * WorkProgress findFirst
   */
  export type WorkProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter, which WorkProgress to fetch.
     */
    where?: WorkProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkProgresses to fetch.
     */
    orderBy?: WorkProgressOrderByWithRelationInput | WorkProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkProgresses.
     */
    cursor?: WorkProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkProgresses.
     */
    distinct?: WorkProgressScalarFieldEnum | WorkProgressScalarFieldEnum[]
  }


  /**
   * WorkProgress findFirstOrThrow
   */
  export type WorkProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter, which WorkProgress to fetch.
     */
    where?: WorkProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkProgresses to fetch.
     */
    orderBy?: WorkProgressOrderByWithRelationInput | WorkProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkProgresses.
     */
    cursor?: WorkProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkProgresses.
     */
    distinct?: WorkProgressScalarFieldEnum | WorkProgressScalarFieldEnum[]
  }


  /**
   * WorkProgress findMany
   */
  export type WorkProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter, which WorkProgresses to fetch.
     */
    where?: WorkProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkProgresses to fetch.
     */
    orderBy?: WorkProgressOrderByWithRelationInput | WorkProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkProgresses.
     */
    cursor?: WorkProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkProgresses.
     */
    skip?: number
    distinct?: WorkProgressScalarFieldEnum | WorkProgressScalarFieldEnum[]
  }


  /**
   * WorkProgress create
   */
  export type WorkProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkProgress.
     */
    data: XOR<WorkProgressCreateInput, WorkProgressUncheckedCreateInput>
  }


  /**
   * WorkProgress createMany
   */
  export type WorkProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkProgresses.
     */
    data: WorkProgressCreateManyInput | WorkProgressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WorkProgress update
   */
  export type WorkProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkProgress.
     */
    data: XOR<WorkProgressUpdateInput, WorkProgressUncheckedUpdateInput>
    /**
     * Choose, which WorkProgress to update.
     */
    where: WorkProgressWhereUniqueInput
  }


  /**
   * WorkProgress updateMany
   */
  export type WorkProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkProgresses.
     */
    data: XOR<WorkProgressUpdateManyMutationInput, WorkProgressUncheckedUpdateManyInput>
    /**
     * Filter which WorkProgresses to update
     */
    where?: WorkProgressWhereInput
  }


  /**
   * WorkProgress upsert
   */
  export type WorkProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkProgress to update in case it exists.
     */
    where: WorkProgressWhereUniqueInput
    /**
     * In case the WorkProgress found by the `where` argument doesn't exist, create a new WorkProgress with this data.
     */
    create: XOR<WorkProgressCreateInput, WorkProgressUncheckedCreateInput>
    /**
     * In case the WorkProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkProgressUpdateInput, WorkProgressUncheckedUpdateInput>
  }


  /**
   * WorkProgress delete
   */
  export type WorkProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
    /**
     * Filter which WorkProgress to delete.
     */
    where: WorkProgressWhereUniqueInput
  }


  /**
   * WorkProgress deleteMany
   */
  export type WorkProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkProgresses to delete
     */
    where?: WorkProgressWhereInput
  }


  /**
   * WorkProgress without action
   */
  export type WorkProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkProgress
     */
    select?: WorkProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkProgressInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    UserID: 'UserID',
    UserName: 'UserName',
    Email: 'Email',
    Password: 'Password',
    Role: 'Role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    ServiceID: 'ServiceID',
    ServiceName: 'ServiceName',
    Description: 'Description',
    UserID: 'UserID',
    SpecialistID: 'SpecialistID'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const SpecialistScalarFieldEnum: {
    SpecialistID: 'SpecialistID',
    Email: 'Email',
    Skills: 'Skills',
    SpecName: 'SpecName',
    Password: 'Password',
    Experience: 'Experience',
    Schedule: 'Schedule',
    Rates: 'Rates'
  };

  export type SpecialistScalarFieldEnum = (typeof SpecialistScalarFieldEnum)[keyof typeof SpecialistScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    BookingID: 'BookingID',
    UserID: 'UserID',
    SpecialistID: 'SpecialistID',
    BookingDate: 'BookingDate',
    Status: 'Status',
    ReviewID: 'ReviewID'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    ReviewID: 'ReviewID',
    UserID: 'UserID',
    SpecialistID: 'SpecialistID',
    Rating: 'Rating',
    ReviewText: 'ReviewText'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const WorkProgressScalarFieldEnum: {
    ProgressID: 'ProgressID',
    BookingID: 'BookingID',
    Percentage: 'Percentage',
    UpdateTime: 'UpdateTime'
  };

  export type WorkProgressScalarFieldEnum = (typeof WorkProgressScalarFieldEnum)[keyof typeof WorkProgressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    UserID?: IntFilter<"User"> | number
    UserName?: StringFilter<"User"> | string
    Email?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    Role?: StringFilter<"User"> | string
    Bookings?: BookingListRelationFilter
    Reviews?: ReviewListRelationFilter
    Services?: ServiceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    UserID?: SortOrder
    UserName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Bookings?: BookingOrderByRelationAggregateInput
    Reviews?: ReviewOrderByRelationAggregateInput
    Services?: ServiceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    UserID?: number
    Email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    UserName?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    Role?: StringFilter<"User"> | string
    Bookings?: BookingListRelationFilter
    Reviews?: ReviewListRelationFilter
    Services?: ServiceListRelationFilter
  }, "UserID" | "Email">

  export type UserOrderByWithAggregationInput = {
    UserID?: SortOrder
    UserName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    UserID?: IntWithAggregatesFilter<"User"> | number
    UserName?: StringWithAggregatesFilter<"User"> | string
    Email?: StringWithAggregatesFilter<"User"> | string
    Password?: StringWithAggregatesFilter<"User"> | string
    Role?: StringWithAggregatesFilter<"User"> | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    ServiceID?: IntFilter<"Service"> | number
    ServiceName?: StringFilter<"Service"> | string
    Description?: StringFilter<"Service"> | string
    UserID?: IntFilter<"Service"> | number
    SpecialistID?: IntNullableFilter<"Service"> | number | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistNullableRelationFilter, SpecialistWhereInput> | null
  }

  export type ServiceOrderByWithRelationInput = {
    ServiceID?: SortOrder
    ServiceName?: SortOrder
    Description?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    Specialist?: SpecialistOrderByWithRelationInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    ServiceID?: number
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    ServiceName?: StringFilter<"Service"> | string
    Description?: StringFilter<"Service"> | string
    UserID?: IntFilter<"Service"> | number
    SpecialistID?: IntNullableFilter<"Service"> | number | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistNullableRelationFilter, SpecialistWhereInput> | null
  }, "ServiceID">

  export type ServiceOrderByWithAggregationInput = {
    ServiceID?: SortOrder
    ServiceName?: SortOrder
    Description?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrderInput | SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    ServiceID?: IntWithAggregatesFilter<"Service"> | number
    ServiceName?: StringWithAggregatesFilter<"Service"> | string
    Description?: StringWithAggregatesFilter<"Service"> | string
    UserID?: IntWithAggregatesFilter<"Service"> | number
    SpecialistID?: IntNullableWithAggregatesFilter<"Service"> | number | null
  }

  export type SpecialistWhereInput = {
    AND?: SpecialistWhereInput | SpecialistWhereInput[]
    OR?: SpecialistWhereInput[]
    NOT?: SpecialistWhereInput | SpecialistWhereInput[]
    SpecialistID?: IntFilter<"Specialist"> | number
    Email?: StringFilter<"Specialist"> | string
    Skills?: StringFilter<"Specialist"> | string
    SpecName?: StringFilter<"Specialist"> | string
    Password?: StringFilter<"Specialist"> | string
    Experience?: StringFilter<"Specialist"> | string
    Schedule?: StringFilter<"Specialist"> | string
    Rates?: StringFilter<"Specialist"> | string
    Bookings?: BookingListRelationFilter
    Reviews?: ReviewListRelationFilter
    Services?: ServiceListRelationFilter
  }

  export type SpecialistOrderByWithRelationInput = {
    SpecialistID?: SortOrder
    Email?: SortOrder
    Skills?: SortOrder
    SpecName?: SortOrder
    Password?: SortOrder
    Experience?: SortOrder
    Schedule?: SortOrder
    Rates?: SortOrder
    Bookings?: BookingOrderByRelationAggregateInput
    Reviews?: ReviewOrderByRelationAggregateInput
    Services?: ServiceOrderByRelationAggregateInput
  }

  export type SpecialistWhereUniqueInput = Prisma.AtLeast<{
    SpecialistID?: number
    Email?: string
    AND?: SpecialistWhereInput | SpecialistWhereInput[]
    OR?: SpecialistWhereInput[]
    NOT?: SpecialistWhereInput | SpecialistWhereInput[]
    Skills?: StringFilter<"Specialist"> | string
    SpecName?: StringFilter<"Specialist"> | string
    Password?: StringFilter<"Specialist"> | string
    Experience?: StringFilter<"Specialist"> | string
    Schedule?: StringFilter<"Specialist"> | string
    Rates?: StringFilter<"Specialist"> | string
    Bookings?: BookingListRelationFilter
    Reviews?: ReviewListRelationFilter
    Services?: ServiceListRelationFilter
  }, "SpecialistID" | "Email">

  export type SpecialistOrderByWithAggregationInput = {
    SpecialistID?: SortOrder
    Email?: SortOrder
    Skills?: SortOrder
    SpecName?: SortOrder
    Password?: SortOrder
    Experience?: SortOrder
    Schedule?: SortOrder
    Rates?: SortOrder
    _count?: SpecialistCountOrderByAggregateInput
    _avg?: SpecialistAvgOrderByAggregateInput
    _max?: SpecialistMaxOrderByAggregateInput
    _min?: SpecialistMinOrderByAggregateInput
    _sum?: SpecialistSumOrderByAggregateInput
  }

  export type SpecialistScalarWhereWithAggregatesInput = {
    AND?: SpecialistScalarWhereWithAggregatesInput | SpecialistScalarWhereWithAggregatesInput[]
    OR?: SpecialistScalarWhereWithAggregatesInput[]
    NOT?: SpecialistScalarWhereWithAggregatesInput | SpecialistScalarWhereWithAggregatesInput[]
    SpecialistID?: IntWithAggregatesFilter<"Specialist"> | number
    Email?: StringWithAggregatesFilter<"Specialist"> | string
    Skills?: StringWithAggregatesFilter<"Specialist"> | string
    SpecName?: StringWithAggregatesFilter<"Specialist"> | string
    Password?: StringWithAggregatesFilter<"Specialist"> | string
    Experience?: StringWithAggregatesFilter<"Specialist"> | string
    Schedule?: StringWithAggregatesFilter<"Specialist"> | string
    Rates?: StringWithAggregatesFilter<"Specialist"> | string
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    BookingID?: IntFilter<"Booking"> | number
    UserID?: IntFilter<"Booking"> | number
    SpecialistID?: IntFilter<"Booking"> | number
    BookingDate?: StringFilter<"Booking"> | string
    Status?: StringFilter<"Booking"> | string
    ReviewID?: IntFilter<"Booking"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
    WorkProgress?: XOR<WorkProgressNullableRelationFilter, WorkProgressWhereInput> | null
  }

  export type BookingOrderByWithRelationInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    BookingDate?: SortOrder
    Status?: SortOrder
    ReviewID?: SortOrder
    User?: UserOrderByWithRelationInput
    Specialist?: SpecialistOrderByWithRelationInput
    WorkProgress?: WorkProgressOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    BookingID?: number
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    UserID?: IntFilter<"Booking"> | number
    SpecialistID?: IntFilter<"Booking"> | number
    BookingDate?: StringFilter<"Booking"> | string
    Status?: StringFilter<"Booking"> | string
    ReviewID?: IntFilter<"Booking"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
    WorkProgress?: XOR<WorkProgressNullableRelationFilter, WorkProgressWhereInput> | null
  }, "BookingID">

  export type BookingOrderByWithAggregationInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    BookingDate?: SortOrder
    Status?: SortOrder
    ReviewID?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    BookingID?: IntWithAggregatesFilter<"Booking"> | number
    UserID?: IntWithAggregatesFilter<"Booking"> | number
    SpecialistID?: IntWithAggregatesFilter<"Booking"> | number
    BookingDate?: StringWithAggregatesFilter<"Booking"> | string
    Status?: StringWithAggregatesFilter<"Booking"> | string
    ReviewID?: IntWithAggregatesFilter<"Booking"> | number
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    ReviewID?: IntFilter<"Review"> | number
    UserID?: IntFilter<"Review"> | number
    SpecialistID?: IntFilter<"Review"> | number
    Rating?: StringFilter<"Review"> | string
    ReviewText?: StringFilter<"Review"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    Rating?: SortOrder
    ReviewText?: SortOrder
    User?: UserOrderByWithRelationInput
    Specialist?: SpecialistOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    ReviewID?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    UserID?: IntFilter<"Review"> | number
    SpecialistID?: IntFilter<"Review"> | number
    Rating?: StringFilter<"Review"> | string
    ReviewText?: StringFilter<"Review"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
  }, "ReviewID">

  export type ReviewOrderByWithAggregationInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    Rating?: SortOrder
    ReviewText?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    ReviewID?: IntWithAggregatesFilter<"Review"> | number
    UserID?: IntWithAggregatesFilter<"Review"> | number
    SpecialistID?: IntWithAggregatesFilter<"Review"> | number
    Rating?: StringWithAggregatesFilter<"Review"> | string
    ReviewText?: StringWithAggregatesFilter<"Review"> | string
  }

  export type WorkProgressWhereInput = {
    AND?: WorkProgressWhereInput | WorkProgressWhereInput[]
    OR?: WorkProgressWhereInput[]
    NOT?: WorkProgressWhereInput | WorkProgressWhereInput[]
    ProgressID?: IntFilter<"WorkProgress"> | number
    BookingID?: IntFilter<"WorkProgress"> | number
    Percentage?: IntFilter<"WorkProgress"> | number
    UpdateTime?: DateTimeFilter<"WorkProgress"> | Date | string
    Booking?: XOR<BookingRelationFilter, BookingWhereInput>
  }

  export type WorkProgressOrderByWithRelationInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
    UpdateTime?: SortOrder
    Booking?: BookingOrderByWithRelationInput
  }

  export type WorkProgressWhereUniqueInput = Prisma.AtLeast<{
    ProgressID?: number
    BookingID?: number
    AND?: WorkProgressWhereInput | WorkProgressWhereInput[]
    OR?: WorkProgressWhereInput[]
    NOT?: WorkProgressWhereInput | WorkProgressWhereInput[]
    Percentage?: IntFilter<"WorkProgress"> | number
    UpdateTime?: DateTimeFilter<"WorkProgress"> | Date | string
    Booking?: XOR<BookingRelationFilter, BookingWhereInput>
  }, "ProgressID" | "BookingID">

  export type WorkProgressOrderByWithAggregationInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
    UpdateTime?: SortOrder
    _count?: WorkProgressCountOrderByAggregateInput
    _avg?: WorkProgressAvgOrderByAggregateInput
    _max?: WorkProgressMaxOrderByAggregateInput
    _min?: WorkProgressMinOrderByAggregateInput
    _sum?: WorkProgressSumOrderByAggregateInput
  }

  export type WorkProgressScalarWhereWithAggregatesInput = {
    AND?: WorkProgressScalarWhereWithAggregatesInput | WorkProgressScalarWhereWithAggregatesInput[]
    OR?: WorkProgressScalarWhereWithAggregatesInput[]
    NOT?: WorkProgressScalarWhereWithAggregatesInput | WorkProgressScalarWhereWithAggregatesInput[]
    ProgressID?: IntWithAggregatesFilter<"WorkProgress"> | number
    BookingID?: IntWithAggregatesFilter<"WorkProgress"> | number
    Percentage?: IntWithAggregatesFilter<"WorkProgress"> | number
    UpdateTime?: DateTimeWithAggregatesFilter<"WorkProgress"> | Date | string
  }

  export type UserCreateInput = {
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingCreateNestedManyWithoutUserInput
    Reviews?: ReviewCreateNestedManyWithoutUserInput
    Services?: ServiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    UserID?: number
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Services?: ServiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutUserNestedInput
    Reviews?: ReviewUpdateManyWithoutUserNestedInput
    Services?: ServiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    UserID?: IntFieldUpdateOperationsInput | number
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    UserID?: number
    UserName: string
    Email: string
    Password: string
    Role: string
  }

  export type UserUpdateManyMutationInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    UserID?: IntFieldUpdateOperationsInput | number
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCreateInput = {
    ServiceName: string
    Description: string
    User: UserCreateNestedOneWithoutServicesInput
    Specialist?: SpecialistCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    UserID: number
    SpecialistID?: number | null
  }

  export type ServiceUpdateInput = {
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutServicesNestedInput
    Specialist?: SpecialistUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ServiceCreateManyInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    UserID: number
    SpecialistID?: number | null
  }

  export type ServiceUpdateManyMutationInput = {
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecialistCreateInput = {
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingCreateNestedManyWithoutSpecialistInput
    Reviews?: ReviewCreateNestedManyWithoutSpecialistInput
    Services?: ServiceCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateInput = {
    SpecialistID?: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutSpecialistInput
    Reviews?: ReviewUncheckedCreateNestedManyWithoutSpecialistInput
    Services?: ServiceUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutSpecialistNestedInput
    Reviews?: ReviewUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateInput = {
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutSpecialistNestedInput
    Reviews?: ReviewUncheckedUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistCreateManyInput = {
    SpecialistID?: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
  }

  export type SpecialistUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialistUncheckedUpdateManyInput = {
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
  }

  export type BookingCreateInput = {
    BookingDate: string
    Status: string
    ReviewID: number
    User: UserCreateNestedOneWithoutBookingsInput
    Specialist: SpecialistCreateNestedOneWithoutBookingsInput
    WorkProgress?: WorkProgressCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    BookingID?: number
    UserID: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
    WorkProgress?: WorkProgressUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingUpdateInput = {
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBookingsNestedInput
    Specialist?: SpecialistUpdateOneRequiredWithoutBookingsNestedInput
    WorkProgress?: WorkProgressUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    WorkProgress?: WorkProgressUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingCreateManyInput = {
    BookingID?: number
    UserID: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
  }

  export type BookingUpdateManyMutationInput = {
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    Rating: string
    ReviewText: string
    User: UserCreateNestedOneWithoutReviewsInput
    Specialist: SpecialistCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    ReviewID?: number
    UserID: number
    SpecialistID: number
    Rating: string
    ReviewText: string
  }

  export type ReviewUpdateInput = {
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutReviewsNestedInput
    Specialist?: SpecialistUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateManyInput = {
    ReviewID?: number
    UserID: number
    SpecialistID: number
    Rating: string
    ReviewText: string
  }

  export type ReviewUpdateManyMutationInput = {
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type WorkProgressCreateInput = {
    Percentage: number
    UpdateTime: Date | string
    Booking: BookingCreateNestedOneWithoutWorkProgressInput
  }

  export type WorkProgressUncheckedCreateInput = {
    ProgressID?: number
    BookingID: number
    Percentage: number
    UpdateTime: Date | string
  }

  export type WorkProgressUpdateInput = {
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    Booking?: BookingUpdateOneRequiredWithoutWorkProgressNestedInput
  }

  export type WorkProgressUncheckedUpdateInput = {
    ProgressID?: IntFieldUpdateOperationsInput | number
    BookingID?: IntFieldUpdateOperationsInput | number
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkProgressCreateManyInput = {
    ProgressID?: number
    BookingID: number
    Percentage: number
    UpdateTime: Date | string
  }

  export type WorkProgressUpdateManyMutationInput = {
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkProgressUncheckedUpdateManyInput = {
    ProgressID?: IntFieldUpdateOperationsInput | number
    BookingID?: IntFieldUpdateOperationsInput | number
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    UserID?: SortOrder
    UserName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    UserID?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    UserID?: SortOrder
    UserName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    UserID?: SortOrder
    UserName?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    UserID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SpecialistNullableRelationFilter = {
    is?: SpecialistWhereInput | null
    isNot?: SpecialistWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    ServiceID?: SortOrder
    ServiceName?: SortOrder
    Description?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    ServiceID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    ServiceID?: SortOrder
    ServiceName?: SortOrder
    Description?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    ServiceID?: SortOrder
    ServiceName?: SortOrder
    Description?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    ServiceID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SpecialistCountOrderByAggregateInput = {
    SpecialistID?: SortOrder
    Email?: SortOrder
    Skills?: SortOrder
    SpecName?: SortOrder
    Password?: SortOrder
    Experience?: SortOrder
    Schedule?: SortOrder
    Rates?: SortOrder
  }

  export type SpecialistAvgOrderByAggregateInput = {
    SpecialistID?: SortOrder
  }

  export type SpecialistMaxOrderByAggregateInput = {
    SpecialistID?: SortOrder
    Email?: SortOrder
    Skills?: SortOrder
    SpecName?: SortOrder
    Password?: SortOrder
    Experience?: SortOrder
    Schedule?: SortOrder
    Rates?: SortOrder
  }

  export type SpecialistMinOrderByAggregateInput = {
    SpecialistID?: SortOrder
    Email?: SortOrder
    Skills?: SortOrder
    SpecName?: SortOrder
    Password?: SortOrder
    Experience?: SortOrder
    Schedule?: SortOrder
    Rates?: SortOrder
  }

  export type SpecialistSumOrderByAggregateInput = {
    SpecialistID?: SortOrder
  }

  export type SpecialistRelationFilter = {
    is?: SpecialistWhereInput
    isNot?: SpecialistWhereInput
  }

  export type WorkProgressNullableRelationFilter = {
    is?: WorkProgressWhereInput | null
    isNot?: WorkProgressWhereInput | null
  }

  export type BookingCountOrderByAggregateInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    BookingDate?: SortOrder
    Status?: SortOrder
    ReviewID?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    ReviewID?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    BookingDate?: SortOrder
    Status?: SortOrder
    ReviewID?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    BookingDate?: SortOrder
    Status?: SortOrder
    ReviewID?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    BookingID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    ReviewID?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    Rating?: SortOrder
    ReviewText?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    Rating?: SortOrder
    ReviewText?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
    Rating?: SortOrder
    ReviewText?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    ReviewID?: SortOrder
    UserID?: SortOrder
    SpecialistID?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BookingRelationFilter = {
    is?: BookingWhereInput
    isNot?: BookingWhereInput
  }

  export type WorkProgressCountOrderByAggregateInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
    UpdateTime?: SortOrder
  }

  export type WorkProgressAvgOrderByAggregateInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
  }

  export type WorkProgressMaxOrderByAggregateInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
    UpdateTime?: SortOrder
  }

  export type WorkProgressMinOrderByAggregateInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
    UpdateTime?: SortOrder
  }

  export type WorkProgressSumOrderByAggregateInput = {
    ProgressID?: SortOrder
    BookingID?: SortOrder
    Percentage?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutUserInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutUserInput | ServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutUserInput | ServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutUserInput | ServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput> | ServiceCreateWithoutUserInput[] | ServiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutUserInput | ServiceCreateOrConnectWithoutUserInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutUserInput | ServiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ServiceCreateManyUserInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutUserInput | ServiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutUserInput | ServiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutServicesInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    connect?: UserWhereUniqueInput
  }

  export type SpecialistCreateNestedOneWithoutServicesInput = {
    create?: XOR<SpecialistCreateWithoutServicesInput, SpecialistUncheckedCreateWithoutServicesInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutServicesInput
    connect?: SpecialistWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesInput
    upsert?: UserUpsertWithoutServicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServicesInput, UserUpdateWithoutServicesInput>, UserUncheckedUpdateWithoutServicesInput>
  }

  export type SpecialistUpdateOneWithoutServicesNestedInput = {
    create?: XOR<SpecialistCreateWithoutServicesInput, SpecialistUncheckedCreateWithoutServicesInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutServicesInput
    upsert?: SpecialistUpsertWithoutServicesInput
    disconnect?: SpecialistWhereInput | boolean
    delete?: SpecialistWhereInput | boolean
    connect?: SpecialistWhereUniqueInput
    update?: XOR<XOR<SpecialistUpdateToOneWithWhereWithoutServicesInput, SpecialistUpdateWithoutServicesInput>, SpecialistUncheckedUpdateWithoutServicesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookingCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput> | BookingCreateWithoutSpecialistInput[] | BookingUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutSpecialistInput | BookingCreateOrConnectWithoutSpecialistInput[]
    createMany?: BookingCreateManySpecialistInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput> | ReviewCreateWithoutSpecialistInput[] | ReviewUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSpecialistInput | ReviewCreateOrConnectWithoutSpecialistInput[]
    createMany?: ReviewCreateManySpecialistInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput> | ServiceCreateWithoutSpecialistInput[] | ServiceUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutSpecialistInput | ServiceCreateOrConnectWithoutSpecialistInput[]
    createMany?: ServiceCreateManySpecialistInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput> | BookingCreateWithoutSpecialistInput[] | BookingUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutSpecialistInput | BookingCreateOrConnectWithoutSpecialistInput[]
    createMany?: BookingCreateManySpecialistInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput> | ReviewCreateWithoutSpecialistInput[] | ReviewUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSpecialistInput | ReviewCreateOrConnectWithoutSpecialistInput[]
    createMany?: ReviewCreateManySpecialistInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput> | ServiceCreateWithoutSpecialistInput[] | ServiceUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutSpecialistInput | ServiceCreateOrConnectWithoutSpecialistInput[]
    createMany?: ServiceCreateManySpecialistInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type BookingUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput> | BookingCreateWithoutSpecialistInput[] | BookingUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutSpecialistInput | BookingCreateOrConnectWithoutSpecialistInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutSpecialistInput | BookingUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: BookingCreateManySpecialistInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutSpecialistInput | BookingUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutSpecialistInput | BookingUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput> | ReviewCreateWithoutSpecialistInput[] | ReviewUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSpecialistInput | ReviewCreateOrConnectWithoutSpecialistInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSpecialistInput | ReviewUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: ReviewCreateManySpecialistInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSpecialistInput | ReviewUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSpecialistInput | ReviewUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput> | ServiceCreateWithoutSpecialistInput[] | ServiceUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutSpecialistInput | ServiceCreateOrConnectWithoutSpecialistInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutSpecialistInput | ServiceUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: ServiceCreateManySpecialistInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutSpecialistInput | ServiceUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutSpecialistInput | ServiceUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput> | BookingCreateWithoutSpecialistInput[] | BookingUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutSpecialistInput | BookingCreateOrConnectWithoutSpecialistInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutSpecialistInput | BookingUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: BookingCreateManySpecialistInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutSpecialistInput | BookingUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutSpecialistInput | BookingUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput> | ReviewCreateWithoutSpecialistInput[] | ReviewUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSpecialistInput | ReviewCreateOrConnectWithoutSpecialistInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSpecialistInput | ReviewUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: ReviewCreateManySpecialistInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSpecialistInput | ReviewUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSpecialistInput | ReviewUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput> | ServiceCreateWithoutSpecialistInput[] | ServiceUncheckedCreateWithoutSpecialistInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutSpecialistInput | ServiceCreateOrConnectWithoutSpecialistInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutSpecialistInput | ServiceUpsertWithWhereUniqueWithoutSpecialistInput[]
    createMany?: ServiceCreateManySpecialistInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutSpecialistInput | ServiceUpdateWithWhereUniqueWithoutSpecialistInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutSpecialistInput | ServiceUpdateManyWithWhereWithoutSpecialistInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type SpecialistCreateNestedOneWithoutBookingsInput = {
    create?: XOR<SpecialistCreateWithoutBookingsInput, SpecialistUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutBookingsInput
    connect?: SpecialistWhereUniqueInput
  }

  export type WorkProgressCreateNestedOneWithoutBookingInput = {
    create?: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
    connectOrCreate?: WorkProgressCreateOrConnectWithoutBookingInput
    connect?: WorkProgressWhereUniqueInput
  }

  export type WorkProgressUncheckedCreateNestedOneWithoutBookingInput = {
    create?: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
    connectOrCreate?: WorkProgressCreateOrConnectWithoutBookingInput
    connect?: WorkProgressWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookingsInput, UserUpdateWithoutBookingsInput>, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type SpecialistUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<SpecialistCreateWithoutBookingsInput, SpecialistUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutBookingsInput
    upsert?: SpecialistUpsertWithoutBookingsInput
    connect?: SpecialistWhereUniqueInput
    update?: XOR<XOR<SpecialistUpdateToOneWithWhereWithoutBookingsInput, SpecialistUpdateWithoutBookingsInput>, SpecialistUncheckedUpdateWithoutBookingsInput>
  }

  export type WorkProgressUpdateOneWithoutBookingNestedInput = {
    create?: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
    connectOrCreate?: WorkProgressCreateOrConnectWithoutBookingInput
    upsert?: WorkProgressUpsertWithoutBookingInput
    disconnect?: WorkProgressWhereInput | boolean
    delete?: WorkProgressWhereInput | boolean
    connect?: WorkProgressWhereUniqueInput
    update?: XOR<XOR<WorkProgressUpdateToOneWithWhereWithoutBookingInput, WorkProgressUpdateWithoutBookingInput>, WorkProgressUncheckedUpdateWithoutBookingInput>
  }

  export type WorkProgressUncheckedUpdateOneWithoutBookingNestedInput = {
    create?: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
    connectOrCreate?: WorkProgressCreateOrConnectWithoutBookingInput
    upsert?: WorkProgressUpsertWithoutBookingInput
    disconnect?: WorkProgressWhereInput | boolean
    delete?: WorkProgressWhereInput | boolean
    connect?: WorkProgressWhereUniqueInput
    update?: XOR<XOR<WorkProgressUpdateToOneWithWhereWithoutBookingInput, WorkProgressUpdateWithoutBookingInput>, WorkProgressUncheckedUpdateWithoutBookingInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type SpecialistCreateNestedOneWithoutReviewsInput = {
    create?: XOR<SpecialistCreateWithoutReviewsInput, SpecialistUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutReviewsInput
    connect?: SpecialistWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type SpecialistUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<SpecialistCreateWithoutReviewsInput, SpecialistUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutReviewsInput
    upsert?: SpecialistUpsertWithoutReviewsInput
    connect?: SpecialistWhereUniqueInput
    update?: XOR<XOR<SpecialistUpdateToOneWithWhereWithoutReviewsInput, SpecialistUpdateWithoutReviewsInput>, SpecialistUncheckedUpdateWithoutReviewsInput>
  }

  export type BookingCreateNestedOneWithoutWorkProgressInput = {
    create?: XOR<BookingCreateWithoutWorkProgressInput, BookingUncheckedCreateWithoutWorkProgressInput>
    connectOrCreate?: BookingCreateOrConnectWithoutWorkProgressInput
    connect?: BookingWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BookingUpdateOneRequiredWithoutWorkProgressNestedInput = {
    create?: XOR<BookingCreateWithoutWorkProgressInput, BookingUncheckedCreateWithoutWorkProgressInput>
    connectOrCreate?: BookingCreateOrConnectWithoutWorkProgressInput
    upsert?: BookingUpsertWithoutWorkProgressInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutWorkProgressInput, BookingUpdateWithoutWorkProgressInput>, BookingUncheckedUpdateWithoutWorkProgressInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BookingCreateWithoutUserInput = {
    BookingDate: string
    Status: string
    ReviewID: number
    Specialist: SpecialistCreateNestedOneWithoutBookingsInput
    WorkProgress?: WorkProgressCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    BookingID?: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
    WorkProgress?: WorkProgressUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: BookingCreateManyUserInput | BookingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    Rating: string
    ReviewText: string
    Specialist: SpecialistCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    ReviewID?: number
    SpecialistID: number
    Rating: string
    ReviewText: string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutUserInput = {
    ServiceName: string
    Description: string
    Specialist?: SpecialistCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutUserInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    SpecialistID?: number | null
  }

  export type ServiceCreateOrConnectWithoutUserInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput>
  }

  export type ServiceCreateManyUserInputEnvelope = {
    data: ServiceCreateManyUserInput | ServiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutUserInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    BookingID?: IntFilter<"Booking"> | number
    UserID?: IntFilter<"Booking"> | number
    SpecialistID?: IntFilter<"Booking"> | number
    BookingDate?: StringFilter<"Booking"> | string
    Status?: StringFilter<"Booking"> | string
    ReviewID?: IntFilter<"Booking"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    ReviewID?: IntFilter<"Review"> | number
    UserID?: IntFilter<"Review"> | number
    SpecialistID?: IntFilter<"Review"> | number
    Rating?: StringFilter<"Review"> | string
    ReviewText?: StringFilter<"Review"> | string
  }

  export type ServiceUpsertWithWhereUniqueWithoutUserInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutUserInput, ServiceUncheckedUpdateWithoutUserInput>
    create: XOR<ServiceCreateWithoutUserInput, ServiceUncheckedCreateWithoutUserInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutUserInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutUserInput, ServiceUncheckedUpdateWithoutUserInput>
  }

  export type ServiceUpdateManyWithWhereWithoutUserInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutUserInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    ServiceID?: IntFilter<"Service"> | number
    ServiceName?: StringFilter<"Service"> | string
    Description?: StringFilter<"Service"> | string
    UserID?: IntFilter<"Service"> | number
    SpecialistID?: IntNullableFilter<"Service"> | number | null
  }

  export type UserCreateWithoutServicesInput = {
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingCreateNestedManyWithoutUserInput
    Reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServicesInput = {
    UserID?: number
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    Reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
  }

  export type SpecialistCreateWithoutServicesInput = {
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingCreateNestedManyWithoutSpecialistInput
    Reviews?: ReviewCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutServicesInput = {
    SpecialistID?: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutSpecialistInput
    Reviews?: ReviewUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutServicesInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutServicesInput, SpecialistUncheckedCreateWithoutServicesInput>
  }

  export type UserUpsertWithoutServicesInput = {
    update: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
    create: XOR<UserCreateWithoutServicesInput, UserUncheckedCreateWithoutServicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServicesInput, UserUncheckedUpdateWithoutServicesInput>
  }

  export type UserUpdateWithoutServicesInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutUserNestedInput
    Reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServicesInput = {
    UserID?: IntFieldUpdateOperationsInput | number
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SpecialistUpsertWithoutServicesInput = {
    update: XOR<SpecialistUpdateWithoutServicesInput, SpecialistUncheckedUpdateWithoutServicesInput>
    create: XOR<SpecialistCreateWithoutServicesInput, SpecialistUncheckedCreateWithoutServicesInput>
    where?: SpecialistWhereInput
  }

  export type SpecialistUpdateToOneWithWhereWithoutServicesInput = {
    where?: SpecialistWhereInput
    data: XOR<SpecialistUpdateWithoutServicesInput, SpecialistUncheckedUpdateWithoutServicesInput>
  }

  export type SpecialistUpdateWithoutServicesInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutSpecialistNestedInput
    Reviews?: ReviewUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutServicesInput = {
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutSpecialistNestedInput
    Reviews?: ReviewUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type BookingCreateWithoutSpecialistInput = {
    BookingDate: string
    Status: string
    ReviewID: number
    User: UserCreateNestedOneWithoutBookingsInput
    WorkProgress?: WorkProgressCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutSpecialistInput = {
    BookingID?: number
    UserID: number
    BookingDate: string
    Status: string
    ReviewID: number
    WorkProgress?: WorkProgressUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutSpecialistInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput>
  }

  export type BookingCreateManySpecialistInputEnvelope = {
    data: BookingCreateManySpecialistInput | BookingCreateManySpecialistInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutSpecialistInput = {
    Rating: string
    ReviewText: string
    User: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutSpecialistInput = {
    ReviewID?: number
    UserID: number
    Rating: string
    ReviewText: string
  }

  export type ReviewCreateOrConnectWithoutSpecialistInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput>
  }

  export type ReviewCreateManySpecialistInputEnvelope = {
    data: ReviewCreateManySpecialistInput | ReviewCreateManySpecialistInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutSpecialistInput = {
    ServiceName: string
    Description: string
    User: UserCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutSpecialistInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    UserID: number
  }

  export type ServiceCreateOrConnectWithoutSpecialistInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput>
  }

  export type ServiceCreateManySpecialistInputEnvelope = {
    data: ServiceCreateManySpecialistInput | ServiceCreateManySpecialistInput[]
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutSpecialistInput, BookingUncheckedUpdateWithoutSpecialistInput>
    create: XOR<BookingCreateWithoutSpecialistInput, BookingUncheckedCreateWithoutSpecialistInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutSpecialistInput, BookingUncheckedUpdateWithoutSpecialistInput>
  }

  export type BookingUpdateManyWithWhereWithoutSpecialistInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutSpecialistInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutSpecialistInput, ReviewUncheckedUpdateWithoutSpecialistInput>
    create: XOR<ReviewCreateWithoutSpecialistInput, ReviewUncheckedCreateWithoutSpecialistInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutSpecialistInput, ReviewUncheckedUpdateWithoutSpecialistInput>
  }

  export type ReviewUpdateManyWithWhereWithoutSpecialistInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutSpecialistInput>
  }

  export type ServiceUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutSpecialistInput, ServiceUncheckedUpdateWithoutSpecialistInput>
    create: XOR<ServiceCreateWithoutSpecialistInput, ServiceUncheckedCreateWithoutSpecialistInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutSpecialistInput, ServiceUncheckedUpdateWithoutSpecialistInput>
  }

  export type ServiceUpdateManyWithWhereWithoutSpecialistInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutSpecialistInput>
  }

  export type UserCreateWithoutBookingsInput = {
    UserName: string
    Email: string
    Password: string
    Role: string
    Reviews?: ReviewCreateNestedManyWithoutUserInput
    Services?: ServiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    UserID?: number
    UserName: string
    Email: string
    Password: string
    Role: string
    Reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Services?: ServiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type SpecialistCreateWithoutBookingsInput = {
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Reviews?: ReviewCreateNestedManyWithoutSpecialistInput
    Services?: ServiceCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutBookingsInput = {
    SpecialistID?: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Reviews?: ReviewUncheckedCreateNestedManyWithoutSpecialistInput
    Services?: ServiceUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutBookingsInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutBookingsInput, SpecialistUncheckedCreateWithoutBookingsInput>
  }

  export type WorkProgressCreateWithoutBookingInput = {
    Percentage: number
    UpdateTime: Date | string
  }

  export type WorkProgressUncheckedCreateWithoutBookingInput = {
    ProgressID?: number
    Percentage: number
    UpdateTime: Date | string
  }

  export type WorkProgressCreateOrConnectWithoutBookingInput = {
    where: WorkProgressWhereUniqueInput
    create: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Reviews?: ReviewUpdateManyWithoutUserNestedInput
    Services?: ServiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    UserID?: IntFieldUpdateOperationsInput | number
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SpecialistUpsertWithoutBookingsInput = {
    update: XOR<SpecialistUpdateWithoutBookingsInput, SpecialistUncheckedUpdateWithoutBookingsInput>
    create: XOR<SpecialistCreateWithoutBookingsInput, SpecialistUncheckedCreateWithoutBookingsInput>
    where?: SpecialistWhereInput
  }

  export type SpecialistUpdateToOneWithWhereWithoutBookingsInput = {
    where?: SpecialistWhereInput
    data: XOR<SpecialistUpdateWithoutBookingsInput, SpecialistUncheckedUpdateWithoutBookingsInput>
  }

  export type SpecialistUpdateWithoutBookingsInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Reviews?: ReviewUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutBookingsInput = {
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Reviews?: ReviewUncheckedUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type WorkProgressUpsertWithoutBookingInput = {
    update: XOR<WorkProgressUpdateWithoutBookingInput, WorkProgressUncheckedUpdateWithoutBookingInput>
    create: XOR<WorkProgressCreateWithoutBookingInput, WorkProgressUncheckedCreateWithoutBookingInput>
    where?: WorkProgressWhereInput
  }

  export type WorkProgressUpdateToOneWithWhereWithoutBookingInput = {
    where?: WorkProgressWhereInput
    data: XOR<WorkProgressUpdateWithoutBookingInput, WorkProgressUncheckedUpdateWithoutBookingInput>
  }

  export type WorkProgressUpdateWithoutBookingInput = {
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkProgressUncheckedUpdateWithoutBookingInput = {
    ProgressID?: IntFieldUpdateOperationsInput | number
    Percentage?: IntFieldUpdateOperationsInput | number
    UpdateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutReviewsInput = {
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingCreateNestedManyWithoutUserInput
    Services?: ServiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    UserID?: number
    UserName: string
    Email: string
    Password: string
    Role: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    Services?: ServiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type SpecialistCreateWithoutReviewsInput = {
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingCreateNestedManyWithoutSpecialistInput
    Services?: ServiceCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutReviewsInput = {
    SpecialistID?: number
    Email: string
    Skills: string
    SpecName: string
    Password: string
    Experience: string
    Schedule: string
    Rates: string
    Bookings?: BookingUncheckedCreateNestedManyWithoutSpecialistInput
    Services?: ServiceUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutReviewsInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutReviewsInput, SpecialistUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutUserNestedInput
    Services?: ServiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    UserID?: IntFieldUpdateOperationsInput | number
    UserName?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SpecialistUpsertWithoutReviewsInput = {
    update: XOR<SpecialistUpdateWithoutReviewsInput, SpecialistUncheckedUpdateWithoutReviewsInput>
    create: XOR<SpecialistCreateWithoutReviewsInput, SpecialistUncheckedCreateWithoutReviewsInput>
    where?: SpecialistWhereInput
  }

  export type SpecialistUpdateToOneWithWhereWithoutReviewsInput = {
    where?: SpecialistWhereInput
    data: XOR<SpecialistUpdateWithoutReviewsInput, SpecialistUncheckedUpdateWithoutReviewsInput>
  }

  export type SpecialistUpdateWithoutReviewsInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutReviewsInput = {
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Skills?: StringFieldUpdateOperationsInput | string
    SpecName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Experience?: StringFieldUpdateOperationsInput | string
    Schedule?: StringFieldUpdateOperationsInput | string
    Rates?: StringFieldUpdateOperationsInput | string
    Bookings?: BookingUncheckedUpdateManyWithoutSpecialistNestedInput
    Services?: ServiceUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type BookingCreateWithoutWorkProgressInput = {
    BookingDate: string
    Status: string
    ReviewID: number
    User: UserCreateNestedOneWithoutBookingsInput
    Specialist: SpecialistCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateWithoutWorkProgressInput = {
    BookingID?: number
    UserID: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
  }

  export type BookingCreateOrConnectWithoutWorkProgressInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutWorkProgressInput, BookingUncheckedCreateWithoutWorkProgressInput>
  }

  export type BookingUpsertWithoutWorkProgressInput = {
    update: XOR<BookingUpdateWithoutWorkProgressInput, BookingUncheckedUpdateWithoutWorkProgressInput>
    create: XOR<BookingCreateWithoutWorkProgressInput, BookingUncheckedCreateWithoutWorkProgressInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutWorkProgressInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutWorkProgressInput, BookingUncheckedUpdateWithoutWorkProgressInput>
  }

  export type BookingUpdateWithoutWorkProgressInput = {
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBookingsNestedInput
    Specialist?: SpecialistUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateWithoutWorkProgressInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateManyUserInput = {
    BookingID?: number
    SpecialistID: number
    BookingDate: string
    Status: string
    ReviewID: number
  }

  export type ReviewCreateManyUserInput = {
    ReviewID?: number
    SpecialistID: number
    Rating: string
    ReviewText: string
  }

  export type ServiceCreateManyUserInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    SpecialistID?: number | null
  }

  export type BookingUpdateWithoutUserInput = {
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    Specialist?: SpecialistUpdateOneRequiredWithoutBookingsNestedInput
    WorkProgress?: WorkProgressUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    WorkProgress?: WorkProgressUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutUserInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutUserInput = {
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
    Specialist?: SpecialistUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    SpecialistID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUpdateWithoutUserInput = {
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Specialist?: SpecialistUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutUserInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    SpecialistID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ServiceUncheckedUpdateManyWithoutUserInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    SpecialistID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingCreateManySpecialistInput = {
    BookingID?: number
    UserID: number
    BookingDate: string
    Status: string
    ReviewID: number
  }

  export type ReviewCreateManySpecialistInput = {
    ReviewID?: number
    UserID: number
    Rating: string
    ReviewText: string
  }

  export type ServiceCreateManySpecialistInput = {
    ServiceID?: number
    ServiceName: string
    Description: string
    UserID: number
  }

  export type BookingUpdateWithoutSpecialistInput = {
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBookingsNestedInput
    WorkProgress?: WorkProgressUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutSpecialistInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
    WorkProgress?: WorkProgressUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutSpecialistInput = {
    BookingID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    BookingDate?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    ReviewID?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutSpecialistInput = {
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutSpecialistInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyWithoutSpecialistInput = {
    ReviewID?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    Rating?: StringFieldUpdateOperationsInput | string
    ReviewText?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUpdateWithoutSpecialistInput = {
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutSpecialistInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceUncheckedUpdateManyWithoutSpecialistInput = {
    ServiceID?: IntFieldUpdateOperationsInput | number
    ServiceName?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    UserID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecialistCountOutputTypeDefaultArgs instead
     */
    export type SpecialistCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpecialistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceDefaultArgs instead
     */
    export type ServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecialistDefaultArgs instead
     */
    export type SpecialistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpecialistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookingDefaultArgs instead
     */
    export type BookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkProgressDefaultArgs instead
     */
    export type WorkProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkProgressDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}